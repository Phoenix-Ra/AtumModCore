import java.nio.file.Files
import java.nio.file.Paths
import java.nio.file.StandardOpenOption
buildscript {

    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://repo.spongepowered.org/maven" }
        jcenter()
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }

    //-------VERSIONING-------
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_stage= versionProps['version.stage'].toString()

    def version_major  = versionProps['version.major'].toInteger()
    def version_minor  = versionProps['version.minor'].toInteger()
    def version_patch  = versionProps['version.patch'].toInteger()
    def version_build  = versionProps['version.build'].toInteger()


    if (isSnapshot) {
        if(version_active){
            version_build += 1
        }
        version = "${version_major}.${version_minor}.${version_patch}${version_stage}-snapshot#${version_build}"
        System.out.println("VERSIONING-SNAPSHOT")
    } else {
        version = "${version_major}.${version_minor}.${version_patch}${version_stage}"
        System.out.println("VERSIONING-RELEASE")

    }

    project.version = version
    //-------VERSIONING END-------
}
plugins{
    id 'java'
    id 'java-library'
    id "com.github.johnrengelman.shadow" version "7.1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'
apply plugin: 'org.spongepowered.mixin'\


group = mod_group
archivesBaseName = mod_name

//------VERSION UPDATE IN FILE------
build{
    def versionPropsFile = file('version.properties')
    def Properties versionProps = new Properties()

    versionProps.load(new FileInputStream(versionPropsFile))

    def version_active = versionProps['version.active'].toBoolean()
    def isSnapshot     = versionProps['version.snapshot'].toBoolean()
    def version_build  = isSnapshot?
            project.version.toString().split("#")[1] : 0
    if(version_active){
        def propsFilePath = file('version.properties').absolutePath
        def lines = Files.readAllLines(Paths.get(propsFilePath))
        def updatedLines = []
        lines.each { line ->
            if (line.startsWith("version.build=")) {
                line = "version.build=$version_build"
            } else if (line.startsWith("version.snapshot=")) {
                line = "version.snapshot=true"
            }
            updatedLines.add(line)
        }
        Files.write(Paths.get(propsFilePath), updatedLines, StandardOpenOption.WRITE, StandardOpenOption.TRUNCATE_EXISTING)
        System.out.println("UPDATING BUILD VERSION")
    }
}
//------VERSION UPDATE END------

compileJava {

    sourceCompatibility = targetCompatibility = '1.8'
    [compileJava, compileTestJava]*.options*.encoding = 'UTF-8'
}

allprojects {
    apply plugin: 'net.minecraftforge.gradle'
    apply plugin: 'eclipse'
    apply plugin: 'maven-publish'
    apply plugin: 'com.github.johnrengelman.shadow'
    minecraft {
        mappings channel: 'snapshot', version: '20171003-1.12'
    }

    repositories {
        mavenCentral()
        maven { url = 'https://jitpack.io' }
    }
    dependencies {
        minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'

        compileOnly('org.spongepowered:mixin:0.8.4') {
            exclude module: 'guava'
            exclude module: 'commons-io'
            exclude module: 'gson'
        }

        implementation 'io.github.classgraph:classgraph:4.8.104'

        implementation 'com.github.Phoenix-Ra:AtumConfiguration:5.0.0'

        //annotations
        compileOnly 'org.projectlombok:lombok:1.18.24'
        compileOnly 'org.jetbrains:annotations:23.0.0'
        annotationProcessor 'org.projectlombok:lombok:1.18.24'
        annotationProcessor 'org.jetbrains:annotations:23.0.0'
        annotationProcessor 'org.spongepowered:mixin:0.8.4:processor'
        testAnnotationProcessor 'org.spongepowered:mixin:0.8.4:processor'

        compileOnly fileTree(dir: 'libs', include: ['*.jar'])
    }
    //replace placeholders from gradle.properties
    processResources {
        filesMatching('**/*.yml') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
        filesMatching('**/*.json') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
        filesMatching('**/*.info') {
            project.properties.each { propertyKey, propertyValue ->
                if (propertyValue instanceof String) {
                    filter {
                        it.replace("\${${propertyKey}}", propertyValue)
                    }
                }
            }
        }
    }
    compileJava {
        dependsOn(clean)
    }
    java{
        withSourcesJar()
    }
    task javadocJar(type: Jar, dependsOn: javadoc) {
        archiveClassifier.set('javadoc')
        from javadoc.destinationDir
    }
    artifacts {
        archives javadocJar
    }
    shadowJar {
        dependencies {
            exclude(dependency ->
                    (!dependency.moduleGroup.startsWith(mod_group) &&
                            !dependency.moduleGroup.startsWith("org.yaml")
                            &&
                            !dependency.moduleGroup.startsWith("io.github.classgraph")
                            &&
                            !dependency.moduleGroup.startsWith("com.github.Phoenix-Ra.AtumConfiguration")
                    )

            )
        }
        duplicatesStrategy DuplicatesStrategy.EXCLUDE //prevent duplicates
        classifier "" //prevent creation of unshadowed jar

        //remove unsupported meta-inf staff from newer java versions
        exclude 'META-INF/versions/**'
        //to not to collide with the same libs on the server or client
        relocate("org.yaml", "me.phoenixra.libs.org.yaml")
        relocate("org.tomlj", "me.phoenixra.libs.org.tomlj")
        relocate("org.antlr", "me.phoenixra.libs.org.antlr")
        relocate("org.checkerframework", "me.phoenixra.libs.org.checkerframework")
        relocate("redempt", "me.phoenixra.libs.redempt")
        relocate("nonapi", "me.phoenixra.libs.nonapi")
        relocate("io.github.classgraph", "me.phoenixra.libs.io.github.classgraph")
        relocate("com.google.gson", "me.phoenixra.libs.com.google.gson")

    }
}
java{
    withSourcesJar()
}
artifacts {
    archives javadocJar
}

minecraft {
    mappings channel: 'snapshot', version: '20171003-1.12'
}
dependencies {
    implementation implementation(project(':atumod-api',))
    implementation implementation(project(':atumod-core',))
    implementation implementation(project(':atumod-mod',))

    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2855'
}



mixin {
    add sourceSets.main, "fancymenu.general.mixin-refmap.json"
}


shadowJar {
    archiveBaseName.set(mod_name)

}

reobf {
    shadowJar {
    }
}


jar {
    manifest {
        attributes "ForceLoadAsMod": "true"
        attributes "FMLCorePluginContainsFMLMod": "true"
        attributes "FMLCorePlugin": "me.phoenixra.atumodcore.mod.fml.FMLPlugin"
        attributes "TweakClass": "org.spongepowered.asm.launch.MixinTweaker"
        attributes "TweakOrder": "0"
    }
}


jar.finalizedBy('reobfJar')


publish.dependsOn('reobfJar')
publishing {
    publications {
        jar(MavenPublication) {
            from components.java
            artifactId 'atumodcore-all'
            artifact javadocJar
        }
    }
}